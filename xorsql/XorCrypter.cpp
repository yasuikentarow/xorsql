/***********************************************************************//**
	@file
***************************************************************************/
#include "xorsql/XorCrypter.hpp"

namespace xorsql {
/***********************************************************************//**
	@brief 
***************************************************************************/
void XorCrypter::setKey(int seed, size_t size) {
  key_.resize(size);
  std::mt19937 random(seed);
  std::uniform_int_distribution<uint8_t> dist(0, 255);
  for(size_t i = 0; i < size; i++) {
    key_[i] = dist(random);
  }
}
/***********************************************************************//**
	@brief 
***************************************************************************/
void XorCrypter::encrypt(void* buff, size_t size, size_t offset) {
  if(!key_.empty()) {
    auto pt = static_cast<uint8_t*>(buff);
    for(size_t i = 0; i < size; i++, pt++) {
      *pt ^= key_.at((offset + i) % key_.size());
    }
  }
}
/***********************************************************************//**
	$Id$
***************************************************************************/
}
